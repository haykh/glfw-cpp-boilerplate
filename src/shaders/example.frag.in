#version 330 core

out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;
in mat4 ViewMat;
in vec3 ViewPos;
in vec2 TexCoords;

struct Mesh {
  // 1 -> default
  // 2 -> emitter
  uint matId;
  uint matIdx;
};

struct DefaultMaterial {
  sampler2D diffuseMap;
  sampler2D specularMap;
  float     shininess;
};

struct EmitterMaterial {
  vec3 color;
};

struct PointLight {
  vec3 position;

  float constant;
  float linear;
  float quadratic;

  vec3 ambientColor;
  vec3 diffuseColor;
  vec3 specularColor;

  float ambientStrength;
  float diffuseStrength;
  float specularStrength;
};

struct DistantLight {
  vec3 direction;

  vec3 ambientColor;
  vec3 diffuseColor;
  vec3 specularColor;

  float ambientStrength;
  float diffuseStrength;
  float specularStrength;
};

struct SpotlightLight {
  vec3  position;
  vec3  direction;
  float cutOff;
  float outerCutOff;

  float constant;
  float linear;
  float quadratic;

  vec3 ambientColor;
  vec3 diffuseColor;
  vec3 specularColor;

  float ambientStrength;
  float diffuseStrength;
  float specularStrength;
};

float smoothLight(float x, float n) {
  return x / pow(1.0f + pow(x, n), 1.0f / n);
}

vec3 smoothLight(vec3 v, float n) {
  return vec3(smoothLight(v.x, n), smoothLight(v.y, n), smoothLight(v.z, n));
}

uniform Mesh activeMesh;

/* subst: light sources */
/* subst: materials */

vec3 CalcPointLight(PointLight      light,
                    vec3            normal,
                    vec3            fragPos,
                    vec3            viewDir,
                    DefaultMaterial mat);
vec3 CalcDistantLight(DistantLight    light,
                      vec3            normal,
                      vec3            viewDir,
                      DefaultMaterial mat);
vec3 CalcSpotLight(SpotlightLight  light,
                   vec3            normal,
                   vec3            fragPos,
                   vec3            viewDir,
                   DefaultMaterial mat);

void main() {
  vec3 norm    = normalize(Normal);
  vec3 viewDir = normalize(ViewPos - FragPos);

  vec3 result = vec3(0.0f);

  if (activeMesh.matId == 1u) {
    // clang-format off /* subst: light calculations */
    // clang-format on
  } else if (activeMesh.matId == 2u) {
    result += emitterMaterial[activeMesh.matIdx].color;
  }

  FragColor = vec4(smoothLight(result, 4.0f), 1.0f);
}

vec3 CombinedLight(float           diff,
                   float           spec,
                   vec3            ambientColor,
                   vec3            diffuseColor,
                   vec3            specularColor,
                   float           ambientStrength,
                   float           diffuseStrength,
                   float           specularStrength,
                   DefaultMaterial mat) {
  vec3 ambient = ambientColor * ambientStrength *
                 texture(mat.diffuseMap, TexCoords).rgb;
  vec3 diffuse = diffuseColor * diff * diffuseStrength *
                 texture(mat.diffuseMap, TexCoords).rgb;
  vec3 specular = specularColor * spec * specularStrength *
                  texture(mat.specularMap, TexCoords).rgb;
  return ambient + diffuse + specular;
}

// calculates the color when using a point light
vec3 CalcPointLight(PointLight      light,
                    vec3            normal,
                    vec3            fragPos,
                    vec3            viewDir,
                    DefaultMaterial mat) {
  vec3  lightDir    = normalize(light.position - fragPos);
  // diffuse shading
  float diff        = max(dot(normal, lightDir), 0.0);
  // specular shading
  vec3  reflectDir  = reflect(-lightDir, normal);
  float spec        = pow(max(dot(viewDir, reflectDir), 0.0), mat.shininess);
  // attenuation
  float distance    = length(light.position - fragPos);
  float attenuation = 1.0 / (light.constant + light.linear * distance +
                             light.quadratic * (distance * distance));
  return CombinedLight(diff,
                       spec,
                       light.ambientColor,
                       light.diffuseColor,
                       light.specularColor,
                       light.ambientStrength,
                       light.diffuseStrength,
                       light.specularStrength,
                       mat) *
         attenuation;
}

vec3 CalcDistantLight(DistantLight    light,
                      vec3            normal,
                      vec3            viewDir,
                      DefaultMaterial mat) {
  vec3  lightDir   = normalize(-light.direction);
  // diffuse shading
  float diff       = max(dot(normal, lightDir), 0.0);
  // specular shading
  vec3  reflectDir = reflect(-lightDir, normal);
  float spec       = pow(max(dot(viewDir, reflectDir), 0.0), mat.shininess);
  return CombinedLight(diff,
                       spec,
                       light.ambientColor,
                       light.diffuseColor,
                       light.specularColor,
                       light.ambientStrength,
                       light.diffuseStrength,
                       light.specularStrength,
                       mat);
}

vec3 CalcSpotLight(SpotlightLight  light,
                   vec3            normal,
                   vec3            fragPos,
                   vec3            viewDir,
                   DefaultMaterial mat) {
  vec3  lightDir    = normalize(light.position - fragPos);
  // diffuse shading
  float diff        = max(dot(normal, lightDir), 0.0);
  // specular shading
  vec3  reflectDir  = reflect(-lightDir, normal);
  float spec        = pow(max(dot(viewDir, reflectDir), 0.0), mat.shininess);
  // attenuation
  float distance    = length(light.position - fragPos);
  float attenuation = 1.0 / (light.constant + light.linear * distance +
                             light.quadratic * (distance * distance));
  // spotlight intensity
  float theta       = dot(lightDir, normalize(-light.direction));
  float epsilon     = light.cutOff - light.outerCutOff;
  float intensity   = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

  return CombinedLight(diff,
                       spec,
                       light.ambientColor,
                       light.diffuseColor,
                       light.specularColor,
                       light.ambientStrength,
                       light.diffuseStrength,
                       light.specularStrength,
                       mat) *
         attenuation * intensity;
}
